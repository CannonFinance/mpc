package table

import (
	"errors"
	"fmt"

	"github.com/renproject/secp256k1"
	"github.com/renproject/shamir"
)

// A Sharing represents the shares and commitment generated by one party for
// one random number.
type Sharing struct {
	shares     shamir.VerifiableShares
	commitment shamir.Commitment
}

// NewSharing constructs a new Sharing from the given shares and commitment.
func NewSharing(shares shamir.VerifiableShares, commitment shamir.Commitment) Sharing {
	return Sharing{shares, commitment}
}

// SizeHint implements the surge.SizeHinter interface.
func (sharing Sharing) SizeHint() int {
	return sharing.shares.SizeHint() + sharing.commitment.SizeHint()
}

// Marshal implements the surge.Marshaler interface.
func (sharing Sharing) Marshal(buf []byte, rem int) ([]byte, int, error) {
	buf, rem, err := sharing.shares.Marshal(buf, rem)
	if err != nil {
		return buf, rem, fmt.Errorf("marshaling shares: %v", err)
	}
	buf, rem, err = sharing.commitment.Marshal(buf, rem)
	if err != nil {
		return buf, rem, fmt.Errorf("marshaling commitment: %v", err)
	}
	return buf, rem, nil
}

// Unmarshal implements the surge.Unmarshaler interface.
func (sharing *Sharing) Unmarshal(buf []byte, rem int) ([]byte, int, error) {
	buf, rem, err := sharing.shares.Unmarshal(buf, rem)
	if err != nil {
		return buf, rem, fmt.Errorf("unmarshaling shares: %v", err)
	}
	buf, rem, err = sharing.commitment.Unmarshal(buf, rem)
	if err != nil {
		return buf, rem, fmt.Errorf("unmarshaling commitment: %v", err)
	}
	return buf, rem, nil
}

// Shares returns the underlying shares of the sharing.
//
// NOTE: Modifying this return value will also modify the sharing.
func (sharing Sharing) Shares() shamir.VerifiableShares {
	return sharing.shares
}

// Commitment returns the underlying commitment of the sharing.
//
// NOTE: Modifying this return value will also modify the sharing.
func (sharing Sharing) Commitment() shamir.Commitment {
	return sharing.commitment
}

// BorrowShares returns a pointer to the underlying shares of the sharing.
func (sharing *Sharing) BorrowShares() *shamir.VerifiableShares {
	return &sharing.shares
}

// BorrowCommitment returns a pointer to the underlying commitment of the sharing.
func (sharing *Sharing) BorrowCommitment() *shamir.Commitment {
	return &sharing.commitment
}

// ShareWithIndex returns the share in the Sharing with the given index, or an
// error if there is no share with the given index.
func (sharing Sharing) ShareWithIndex(index secp256k1.Fn) (shamir.VerifiableShare, error) {
	for _, share := range sharing.shares {
		s := share.Share
		if s.IndexEq(&index) {
			return share, nil
		}
	}
	return shamir.VerifiableShare{}, errors.New("no share with the given index was found")
}

// N returns the number of shares in the Sharing.
func (sharing Sharing) N() int { return len(sharing.shares) }
